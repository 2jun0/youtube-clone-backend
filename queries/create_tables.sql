CREATE TABLE accounts (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  email VARCHAR(40) UNIQUE,
  password VARCHAR(30) NOT NULL,
  first_name VARCHAR(10) NOT NULL,
  last_name VARCHAR(10) NOT NULL
);

CREATE TABLE channels (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  name VARCHAR(20) NOT NULL,
  description TEXT,
  account_id INTEGER REFERENCES accounts(id) ON DELETE CASCADE
);

CREATE TABLE subscribe (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  subscriber_id INTEGER NOT NULL REFERENCES channels(id) ON DELETE CASCADE,
  subscribing_id INTEGER NOT NULL REFERENCES channels(id) ON DELETE CASCADE,
  UNIQUE(subscriber_id, subscribing_id),
  CHECK(subscriber_id <> subscribing_id)
);

CREATE TABLE videos (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(50) NOT NULL,
  views_cnt INTEGER DEFAULT 0,
  description TEXT,
  len INTEGER NOT NULL,
  thumbnail_url VARCHAR(240) NOT NULL,
  channel_id INTEGER NOT NULL REFERENCES channels(id) ON DELETE CASCADE
);

CREATE TABLE community_posts (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  contents TEXT,
  img_url VARCHAR(240),
  channel_id INTEGER NOT NULL REFERENCES channels(id) ON DELETE CASCADE
);

CREATE TABLE channel_statuses_for_video (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  last_viewed_loc INTEGER NOT NULL,
  channel_id INTEGER NOT NULL REFERENCES channels(id) ON DELETE CASCADE,
  video_id INTEGER NOT NULL REFERENCES videos(id) ON DELETE CASCADE,
  UNIQUE(channel_id, video_id)
);

CREATE TABLE comments (
  id SERIAL PRIMARY KEY,
  contents VARCHAR(500),

  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,

  channel_id INTEGER NOT NULL REFERENCES channels(id) ON DELETE CASCADE,

  ref_comment_id INTEGER NOT NULL REFERENCES comments(id) ON DELETE CASCADE,
  parent_comment_id INTEGER NOT NULL REFERENCES comments(id) ON DELETE CASCADE,

  video_id INTEGER REFERENCES videos(id) ON DELETE CASCADE,
  post_id INTEGER REFERENCES community_posts(id) ON DELETE CASCADE,
  CHECK (
    COALESCE((video_id)::BOOLEAN::INTEGER, 0)
    +
    COALESCE((post_id)::BOOLEAN::INTEGER, 0)
    = 1
  )
);

CREATE TABLE hashtags (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(20) NOT NULL UNIQUE,
);

CREATE TABLE hashtags_for_video (
  id SERIAL PRIMARY KEY,
  hashtag_id INTEGER NOT NULL REFERENCES hashtags(id) ON DELETE CASCADE,
  video_id INTEGER NOT NULL REFERENCES videos(id) ON DELETE CASCADE,
  UNIQUE(hashtag_id, video_id)
);

CREATE TABLE likes (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  is_like BOOLEAN DEFAULT true,
  channel_id INTEGER NOT NULL REFERENCES channels(id) ON DELETE CASCADE,
  video_id INTEGER REFERENCES videos(id) ON DELETE CASCADE,
  post_id INTEGER REFERENCES community_posts(id) ON DELETE CASCADE,
  comment_id INTEGER REFERENCES comments(id) ON DELETE CASCADE,
  CHECK (
    COALESCE((video_id)::BOOLEAN::INTEGER, 0)
    +
    COALESCE((post_id)::BOOLEAN::INTEGER, 0)
    +
    COALESCE((comment_id)::BOOLEAN::INTEGER, 0)
    = 1
  ),
  UNIQUE(chennel_id, video_id, post_id, comment_id)
);
